package bot

import (
	"database/sql"
	"fmt"

	"../database"
	"github.com/fatih/color"
	"github.com/go-telegram-bot-api/telegram-bot-api"
)

func (tgbot *TelegramBot) AnalyzeUpdate(update tgbotapi.Update, db *sql.DB) {
	switch {
	case update.CallbackQuery != nil:
		chatID := update.CallbackQuery.Message.Chat.ID
		messageID := update.CallbackQuery.Message.MessageID
		if database.IsUserInDatabase(chatID, db) == false {
			color.Red(fmt.Sprintln("CallBACL: ", chatID))
			database.AddUser(db, chatID)
		} //–û–ë–ù–£–õ–ò–¢–¨ –ó–ù–ê–ß–ï–ù–ò–Ø

		switch update.CallbackQuery.Data {
		case "–û–¥–µ–∂–¥–∞":
			id := database.GetCatalogId(db, "–û–¥–µ–∂–¥–∞") //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è id –∑–∞–ø–∏—Å–∏ –ø–æ –∏–º–µ–Ω–∏
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		ca–µ—Ése "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞":
			id := database.GetCatalogId(db, "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞":
			id := database.GetCatalogId(db, "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–û–±—É–≤—å":
			id := database.GetCatalogId(db, "–û–±—É–≤—å")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å":
			id := database.GetCatalogId(db, "–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å":
			id := database.GetCatalogId(db, "–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞":
			id := database.GetCatalogIDSameSections(db, chatID, "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–§—É—Ç–±–æ–ª–∫–∏ –∏ –º–∞–π–∫–∏":
			id := database.GetCatalogIDSameSections(db, chatID, "–§—É—Ç–±–æ–ª–∫–∏ –∏ –º–∞–π–∫–∏")
			tgbot.ChangeMessage(update, db, messageID, chatID, id)
		case "–§—É—Ç–±–æ–ª–∫–∏":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–§—É—Ç–±–æ–ª–∫–∏")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)
		case "–ü–ª–∞—Ç—å—è":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–ü–ª–∞—Ç—å—è")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)
		case "–Æ–±–∫–∏":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–Æ–±–∫–∏")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)
		case "–ñ–∏–ª–µ—Ç—ã":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–ñ–∏–ª–µ—Ç—ã")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)
		case "–ö–æ–º–±–∏–Ω–µ–∑–æ–Ω—ã":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–ö–æ–º–±–∏–Ω–µ–∑–æ–Ω—ã")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)

		case "–ú–∞–π–∫–∏":
			tgbot.DeleteMessage(update)
			id := database.GetCatalogIDSameSections(db, chatID, "–ú–∞–π–∫–∏")
			database.SetCurrentParnetId(db, chatID, id) // –≤ —Ç–∞–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—è–µ—Ç—Å—è id_parent
			tgbot.SendItems(update, db, id)
		case "–ö–∞—Ç–∞–ª–æ–≥ –≤–ø–µ—Ä–µ–¥":
			tgbot.DeleteMessage(update)
			tgbot.IncreaseCurrentItem(db, chatID)
			tgbot.ChangeCurrentSection(update, db, chatID)
		case "–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–∑–∞–¥":
			tgbot.DeleteMessage(update)
			tgbot.DecreaseCurrentItem(db, chatID)
			tgbot.ChangeCurrentSection(update, db, chatID)
		case "–ù–∞–∑–∞–¥":
			tgbot.DeleteMessage(update)
			idCurrent := database.GetCurrentParnetId(db, chatID)
			color.Green(fmt.Sprintln("ID CURRENT: ", idCurrent))
			id := database.GetParentID(db, idCurrent)
			color.Green(fmt.Sprintln("ID PARENT: ", id))
			database.SetCurrentParnetId(db, chatID, id)
			tgbot.ChangeCurrentSection(update, db, chatID)
		case "–ï—â—ë":
			tgbot.DeleteMessage(update)
			idCurrent := database.GetCurrentParnetId(db, chatID)
			color.Green(fmt.Sprintln("ID CURRENT: ", idCurrent))
			tgbot.IncreaseCurrentItem(db, chatID)
			tgbot.SendItems(update, db, idCurrent)
		}

	case update.Message != nil:
		chatID := update.Message.Chat.ID
		if database.IsUserInDatabase(chatID, db) == false {
			color.Red(fmt.Sprintln("USUAL: ", chatID))
			database.AddUser(db, chatID)
		}

		switch update.Message.Text {
		case "/start":
			tgbot.Greeting(update)
			tgbot.SendMenu(update)
		case "–ö–∞—Ç–∞–ª–æ–≥":
			menuMsg := tgbotapi.NewMessage(chatID, "<i>–ö–∞—Ç–∞–ª–æ–≥:</i>")
			menuMsg.ParseMode = "HTML"
			menuMsg.ReplyMarkup = tgbot.SendMenuButton(update)
			catalogMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
			catalogMsg.ReplyMarkup = tgbot.SendCatalog(update, db)
			tgbot.Token.Send(menuMsg)
			tgbot.Token.Send(catalogMsg)
		case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
			tgbot.SendMenu(update)
		case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
			msg := tgbotapi.NewPhotoShare(chatID, "AgADAgAD66gxG5FEUUhyy2GRiLwx8s8MnA4ABCetSue57gYe7JABAAEC")
			msg.Caption = "2345678"
			tgbot.Token.Send(msg)
		default:
			if update.Message.Photo != nil {
				photo := *update.Message.Photo
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, photo[0].FileID)
				tgbot.Token.Send(msg)
				color.Red(photo[0].FileID)
			}
		}
	}
}

func (tgbot *TelegramBot) SendItems(update tgbotapi.Update, db *sql.DB, id int) {
	color.Red("HERE!!!!!!!")
	chatID := update.CallbackQuery.Message.Chat.ID
	offset := database.GetCurrentItem(db, chatID)
	color.Yellow(fmt.Sprintln("OFFSET: ", offset))
	items := database.GetItems(db, id, offset)
	color.Green(fmt.Sprintln("ITEMS: ", items))
	for _, item := range items {
		keyboard := tgbotapi.InlineKeyboardMarkup{}
		bucket := tgbotapi.NewInlineKeyboardButtonData("–í –∫–æ—Ä–∑–∏–Ω—É", "–í –∫–æ—Ä–∑–∏–Ω—É")
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{bucket})
		msg := tgbotapi.NewPhotoShare(chatID, item.Photo)
		msg.Caption = fmt.Sprintf("%s\n–¶–µ–Ω–∞: %s\n–¶–≤–µ—Ç: %s\n%s", item.Title, item.Price, item.Color, item.Description)
		msg.ReplyMarkup = keyboard
		tgbot.Token.Send(msg)
	}
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	count := database.GetItemsCount(db, id)
	another := tgbotapi.NewInlineKeyboardButtonData("–ï—â—ë", "–ï—â—ë")
	back := tgbotapi.NewInlineKeyboardButtonData("–ö –∫–∞—Ç–∞–ª–æ–≥—É", "–ù–∞–∑–∞–¥")
	if offset+5 >= count {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{back})
	} else {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{another, back})
	}
	msg.ReplyMarkup = keyboard
	tgbot.Token.Send(msg)
}

func (tgbot *TelegramBot) SendSections(update tgbotapi.Update, db *sql.DB, id int) tgbotapi.InlineKeyboardMarkup {
	// id –∑–∞–ø–∏—Å–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ tables.catalog
	chatID := update.CallbackQuery.Message.Chat.ID
	offset := database.GetCurrentItem(db, chatID)    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å–º–æ—Ç—Ä–µ—Ç—å, offest
	recordsCount := database.GetRecordsCount(db, id) //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ—Ç–æ—Ä–π id_parent = id —Ä–∞–∑–¥–µ–ª–∞
	sections := database.GetClothes(db, offset, id)  // –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö id_parent = id
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	for _, section := range sections {
		color.Red(section)
		btn := tgbotapi.NewInlineKeyboardButtonData(section, section)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{btn})
	}
	if id == 1 || id == 2 {
		back := tgbotapi.NewInlineKeyboardButtonData("üîº", "–ù–∞–∑–∞–¥")
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{back})

	} else if id > 2 {
		back := tgbotapi.NewInlineKeyboardButtonData("üîº", "–ù–∞–∑–∞–¥")
		right := tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è", "–ö–∞—Ç–∞–ª–æ–≥ –≤–ø–µ—Ä–µ–¥")
		left := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è", "–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–∑–∞–¥")
		switch {
		case recordsCount <= 5:
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{back})
		case recordsCount-offset <= 5:
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{left, back})
		case offset == 0:
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{back, right})
		case offset > 0:
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{left, back, right})

		}
	}

	return keyboard
}

func (tgbot *TelegramBot) SendCatalog(update tgbotapi.Update, db *sql.DB) tgbotapi.InlineKeyboardMarkup {
	sections := database.GetRootSection(db)
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	for _, section := range sections {
		btn := tgbotapi.NewInlineKeyboardButtonData(section, section)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{btn})
	}
	return keyboard
}

func (tgbot *TelegramBot) Greeting(update tgbotapi.Update) {
	firstName, chatID := update.Message.From.FirstName, update.Message.Chat.ID
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –í–∞—Å, %s", firstName))
	tgbot.Token.Send(msg)
}

func (tgbot *TelegramBot) SendMenu(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	catalog := tgbotapi.NewKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥")
	bucket := tgbotapi.NewKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
	registration := tgbotapi.NewKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
	news := tgbotapi.NewKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏")
	keyboard := tgbotapi.ReplyKeyboardMarkup{Keyboard: [][]tgbotapi.KeyboardButton{{catalog, bucket}, {registration, news}}, ResizeKeyboard: true, OneTimeKeyboard: true}
	msg.ReplyMarkup = keyboard
	tgbot.Token.Send(msg)
}

func (tgbot *TelegramBot) SendMenuButton(update tgbotapi.Update) tgbotapi.ReplyKeyboardMarkup {
	menu := tgbotapi.NewKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	keyboard := tgbotapi.ReplyKeyboardMarkup{Keyboard: [][]tgbotapi.KeyboardButton{{menu}}, ResizeKeyboard: true, OneTimeKeyboard: true}
	return keyboard
}
